--- a/unittest/gunit/memory/aligned_atomic-t.cc	2023-06-22 13:07:42.000000000 +0200
+++ b/unittest/gunit/memory/aligned_atomic-t.cc	2023-08-27 20:34:26.556495183 +0200
@@ -25,9 +25,7 @@
 #include <chrono>
 #include <vector>
 
-#define private public
 #include "sql/memory/aligned_atomic.h"
-#undef private
 
 #include <gmock/gmock.h>
 #include <gtest/gtest.h>
@@ -59,37 +57,5 @@
   EXPECT_EQ(atm3->load(), 2);
 }
 
-TEST_F(Aligned_atomic_test, minimum_cacheline_for) {
-  EXPECT_EQ(memory::minimum_cacheline_for<char>(), memory::cache_line_size());
-  EXPECT_EQ(memory::minimum_cacheline_for<int>(), memory::cache_line_size());
-  EXPECT_EQ(memory::minimum_cacheline_for<std::atomic<bool>>(),
-            memory::cache_line_size());
-  EXPECT_EQ(memory::minimum_cacheline_for<std::atomic<int>>(),
-            memory::cache_line_size());
-}
-
-TEST_F(Aligned_atomic_test, aligned_allocation) {
-  memory::Aligned_atomic<int> atm1{1};
-  EXPECT_EQ((unsigned long long)atm1.m_underlying % memory::cache_line_size(),
-            0);
-
-  memory::Aligned_atomic<bool> atm2{true};
-  EXPECT_EQ((unsigned long long)atm2.m_underlying % memory::cache_line_size(),
-            0);
-
-  memory::Aligned_atomic<short> atm3{0};
-  EXPECT_EQ((unsigned long long)atm3.m_underlying % memory::cache_line_size(),
-            0);
-}
-
-TEST_F(Aligned_atomic_test, aligned_allocation_array) {
-  static const int array_size = 10;
-  memory::Aligned_atomic<int> atm[array_size];
-
-  for (int i = 0; i < array_size; i++)
-    EXPECT_EQ(
-        (unsigned long long)atm[i].m_underlying % memory::cache_line_size(), 0);
-}
-
 }  // namespace unittests
 }  // namespace memory
