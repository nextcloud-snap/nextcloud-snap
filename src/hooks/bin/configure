#!/bin/sh

# Supported keys:
# - ports.http (integer)
#   Port on which the snap will listen for HTTP traffic.
#
# - ports.https (integer)
#   Port on which the snap will listen for HTTPS traffic (only applies if HTTPS
#   is enabled).
#
# - php.memory-limit (string)
#   Memory limit for PHP workers. String can include units, e.g. 32M is 32
#   megabytes.
#
# - nextcloud.cron-interval (string)
#   Interval of the internal Nextcloud cronjob
#

# shellcheck source=src/apache/utilities/apache-utilities
. "$SNAP/utilities/apache-utilities"
# shellcheck source=src/php/utilities/php-utilities
. "$SNAP/utilities/php-utilities"
# shellcheck source=src/nextcloud/utilities/nextcloud-utilities
. "$SNAP/utilities/nextcloud-utilities"
# shellcheck source=src/hooks/utilities/configuration-utilities
. "$SNAP/utilities/configuration-utilities"

handle_apache_port_config()
{
	http_port="$(apache_http_port)"
	https_port="$(apache_https_port)"
	previous_http_port="$(apache_previous_http_port)"
	previous_https_port="$(apache_previous_https_port)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$http_port" = "$previous_http_port" ] && [ "$https_port" = "$previous_https_port" ]; then
		return 0
	fi

	# Validate HTTP port
	if ! expr "$http_port" : '^[0-9]\+$' > /dev/null; then
		echo "\"$http_port\" is not a valid HTTP port" >&2
		return 1
	fi

	# Validate HTTPS port
	if ! expr "$https_port" : '^[0-9]\+$' > /dev/null; then
		echo "\"$https_port\" is not a valid HTTPS port" >&2
		return 1
	fi

	# Set new values. Since snapctl only gives us new values, also keep track
	# of the current values so we know when they change.
	apache_set_http_port "$http_port"
	apache_set_https_port "$https_port"
	apache_set_previous_http_port "$http_port"
	apache_set_previous_https_port "$https_port"

	# Restart Apache to apply new config
	snapctl restart nextcloud.apache
}

handle_php_memory_limit()
{
	memory_limit="$(php_memory_limit)"
	previous_memory_limit="$(php_previous_memory_limit)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$memory_limit" = "$previous_memory_limit" ]; then
		return 0
	fi

	# Validate memory limit. -1, raw bytes, and K/M/G shorthand allowed.
	if ! expr "$memory_limit" : '^-\?[0-9]\+[KMG]\?$' > /dev/null; then
		echo "\"$memory_limit\" is not a valid PHP memory limit" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	php_set_memory_limit "$memory_limit"
	php_set_previous_memory_limit "$memory_limit"

	# Restart PHP to apply new config
	snapctl restart nextcloud.php-fpm
}

handle_cronjob_interval()
{
	interval="$(cronjob_interval)"
	previous_interval="$(previous_cronjob_interval)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$interval" = "$previous_interval" ]; then
		return 0
	fi

	# Validate time interval seconds (s), minutes (m), hours (h), "-1" or no specified type(by default seconds) are allowed
	if ! expr "$interval" : '^\(\(\([0-9]*\.\)\?[0-9]\+[smhd]\?\)\|\(\-1\)\)$' > /dev/null; then
		echo "\"$interval\" is not a valid timespan" >&2
		return 1
	fi

	# Set new value. Since snapctl only gives us new values, also keep track of
	# the current value so we know when it changes.
	set_cronjob_interval "$interval"
	set_previous_cronjob_interval "$interval"

	# Restart cronjob to apply new config
	snapctl restart nextcloud.nextcloud-cron
}

handle_mode()
{
	# If no changes were requested, then there's nothing to do here.
	if ! mode_has_changed; then
		return 0
	fi

	if debug_mode_enabled; then
		enable_debug_mode
	elif production_mode_enabled; then
		enable_production_mode
	else
		echo "mode must be either 'debug' or 'production'"
		return 1
	fi

	# Restart all affected services. As of now that's Apache and PHP.
	snapctl restart nextcloud.apache
	snapctl restart nextcloud.php-fpm
}

handle_apache_port_config && \
handle_php_memory_limit && \
handle_cronjob_interval && \
handle_mode