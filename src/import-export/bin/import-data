#!/bin/sh

if [ "$(id -u)" -ne 0 ]; then
	echo "This utility needs to run as root"
	exit 1
fi

# shellcheck source=src/nextcloud/utilities/nextcloud-utilities
. "$SNAP/utilities/nextcloud-utilities"
# shellcheck source=src/mysql/utilities/mysql-utilities
. "$SNAP/utilities/mysql-utilities"
# shellcheck source=src/common/utilities/common-utilities
. "$SNAP/utilities/common-utilities"

# shellcheck disable=SC2119
wait_for_mysql

COMMAND="nextcloud.import"

print_usage()
{
	echo "Usage:"
	echo "    $COMMAND [OPTIONS] <backup dir>"
	echo "    Import data exported from another Nextcloud snap instance."
	echo "    By default this imports the"
        echo "    apps, database, config, keys, and data"
	echo "    (equivalent to running $COMMAND -abcdef)."
	echo ""
	echo "Available options:"
	echo "    -h: Display this help message"
	echo "    -a: Import the (non-default) apps"
	echo "    -b: Import the database"
	echo "    -c: Import the config"
	echo "    -d: Import the data"
	echo "    -e: Import the encryption keys"
}

import_apps()
{
	backup_dir="${1%/}"
	apps_backup="${backup_dir}/apps"
	run_command "Clearing existing non-default apps" rm -rf "$SNAP_DATA/nextcloud/extra-apps"
	echo "Importing apps..."
	if ! rsync -ah --info=progress2 "$apps_backup/" "$SNAP_DATA/nextcloud/extra-apps"; then
		echo "Unable to import apps"
		exit 1
	fi
}

import_database()
{
	backup_dir="$1"
	database_backup="${backup_dir}/database.sql"

	# First, drop the database (if any)
	run_command "Dropping existing database" run-mysql -e "DROP DATABASE nextcloud"
	run_command "Creating new database" run-mysql -e "CREATE DATABASE nextcloud"
	run_command "Granting database privileges to existing user" \
	            run-mysql -e "GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'localhost'"


	# Now restore the database
	echo "Importing database..."
	if ! run-mysql nextcloud < "$database_backup"; then
		echo "Unable to import database"
		exit 1
	fi
}

import_config()
{
	backup_dir="$1"
	config_backup="${backup_dir}/config.php"
	database_password="$(mysql_get_nextcloud_password)"

	# Import the config, but set our new database password
	echo "Importing config..."
	if ! sed "s/DBPASSWORD/$database_password/" \
	         "$config_backup" > "${SNAP_DATA}/nextcloud/config/config.php"; then
		echo "Unable to import config"
		exit 1
	fi
}

import_data()
{
	backup_dir="${1%/}"
	data_backup="${backup_dir}/data"
	run_command "Clearing existing data" rm -rf "$NEXTCLOUD_DATA_DIR"
	echo "Importing data..."
	if ! rsync -ah --info=progress2 "$data_backup/" "$NEXTCLOUD_DATA_DIR"; then
		echo "Unable to import data"
		exit 1
	fi
}

import_keys()
{
	backup_dir="${1%/}"
        keys_backup="${backup_dir}/keys"
	occ_err="/tmp/nextcloud_occ.err"
	if [ ! -d "$keys_backup" ]; then
                echo "Encryption keys were not found in the provided backup, skipping."
	else
        	run_command "Clearing existing system-wide encryption keys" rm -rf "$NEXTCLOUD_DATA_DIR"/files_encryption
		run_command "Clearing existing user encryption keys" nextcloud.occ user:list 2>"$occ_err" | awk '{print $3}' | xargs -I{} rm -rf "$NEXTCLOUD_DATA_DIR"/'{}'/files_encryption
		if [ "$(cat $occ_err)" != "Nextcloud is in maintenance mode - no apps have been loaded" ]; then
			# ignore the maintenance mode message but print out other errors.
			echo "WARNING: nextcloud.occ reported an error checking the status of encryption:"
			cat "$occ_err"
		fi
        	echo "Importing encryption keys..."
        	if ! rsync -ah --info=progress2 "$keys_backup/" "$NEXTCLOUD_DATA_DIR"; then
                	echo "Unable to import keys"
                	exit 1
        	fi
	fi
}

do_import_apps=false
do_import_database=false
do_import_config=false
do_import_data=false
do_import_keys=false

# If no parameters are specified, default to importing everything
if [ $# -eq 1 ]; then
	do_import_apps=true
	do_import_database=true
	do_import_config=true
	do_import_data=true
	do_import_keys=false  # keys already get grabbed in a full data import
fi

while getopts ":abcdeh" opt; do
	case $opt in
		a)
			do_import_apps=true
			;;
		b)
			do_import_database=true
			;;
		c)
			do_import_config=true
			;;
		d)
			do_import_data=true
			;;
		e)
                        do_import_keys=true
                        ;;
		h)
			print_usage
			exit 0
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done

# Clear options
shift "$((OPTIND-1))"

echo "WARNING: This functionality is still experimental and under" >&2
echo "development, use at your own risk. Note that the CLI interface is" >&2
echo "unstable, so beware if using from within scripts." >&2
echo "" >&2

# Enable maintenance mode so data can't change out from under us
if ! enable_maintenance_mode; then
	echo "Unable to enter maintenance mode"
	exit 1
fi
trap 'disable_maintenance_mode' EXIT

backup_dir="$1"
if [ -z "$backup_dir" ]; then
	echo "Missing parameter <backup dir>"
	print_usage
	exit 1
fi

if [ "$do_import_apps" = true ]; then
	import_apps "$backup_dir"
fi

if [ "$do_import_database" = true ]; then
	import_database "$backup_dir"
fi

if [ "$do_import_config" = true ]; then
	import_config "$backup_dir"
fi

if [ "$do_import_keys" = true ] && [ "$do_import_data" = false ]; then
        import_keys "$backup_dir"
fi

if [ "$do_import_data" = true ]; then
	import_data "$backup_dir"
fi
